# -*- mode: ruby -*-
# vi: set ft=ruby :

# Configuration
BOX_IMAGE = "ubuntu/jammy64"

VM_NAME_PREFIX = "kube"

NUMBER_OF_CONTROL_PLANES = 1
NUMBER_OF_NODES = 3

VM_SUBNET = "192.168.56."

VM_CONTROL_PLANE_CPUS = 2
VM_CONTROL_PLANE_MEMORY = 3072
VM_NODE_CPUS = 2
VM_NODE_MEMORY = 2560

VM_CONTROL_PLANE_EXTRA_DISK_ENABLED = false
VM_CONTROL_PLANE_EXTRA_DISK_SIZE = 10240 # MB
VM_NODE_EXTRA_DISK_ENABLED = false
VM_NODE_EXTRA_DISK_SIZE = 10240 # MB

VAGRANT_VMS = (1..NUMBER_OF_CONTROL_PLANES).map do |i|
  {
    name: "#{VM_NAME_PREFIX}-control#{i}",
    cpus: VM_CONTROL_PLANE_CPUS,
    memory: VM_CONTROL_PLANE_MEMORY,
    extra_disk_enabled: VM_CONTROL_PLANE_EXTRA_DISK_ENABLED,
    extra_disk_size: VM_CONTROL_PLANE_EXTRA_DISK_SIZE,
    ip: "#{VM_SUBNET}1#{i}"
  }
end

VAGRANT_VMS += (1..NUMBER_OF_NODES).map do |i|
  {
    name: "#{VM_NAME_PREFIX}-node#{i}",
    cpus: VM_NODE_CPUS,
    memory: VM_NODE_MEMORY,
    extra_disk_enabled: VM_NODE_EXTRA_DISK_ENABLED,
    extra_disk_size: VM_NODE_EXTRA_DISK_SIZE,
    ip: "#{VM_SUBNET}2#{i}"
  }
end

Vagrant.configure("2") do |config|
  VAGRANT_VMS.each do |vm|
    config.vm.define vm[:name] do |machine|
      configure_vm(machine, vm)
    end
  end

  # Change APT Repository & Enable SSH Password Authentication
  config.vm.provision "shell", inline: <<-SHELL
    sed -i 's/archive.ubuntu.com/mirror.kakao.com/g' /etc/apt/sources.list
    sed -i 's/security.ubuntu.com/mirror.kakao.com/g' /etc/apt/sources.list
    sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config
    sed -i 's/KbdInteractiveAuthentication no/KbdInteractiveAuthentication yes/g' /etc/ssh/sshd_config
    systemctl restart ssh
  SHELL
end

def configure_vm(config, vm)
  config.vm.hostname = vm[:name]
  config.vm.box = BOX_IMAGE
  config.vm.network "private_network", ip: vm[:ip], nic_type: "virtio"
  config.vm.provider "virtualbox" do |vb|
    vb.linked_clone = false
    vb.name = vm[:name]
    vb.cpus = vm[:cpus]
    vb.memory = vm[:memory]
    if vm[:extra_disk_enabled] == true
      disk_path = "disks/#{vm[:name]}.vmdk"
      unless File.exist?(disk_path)
        vb.customize ['createmedium', 'disk', '--format', 'VMDK', '--filename', disk_path, '--size', vm[:extra_disk_size]]
      end
      vb.customize ['storageattach', :id, '--storagectl', 'SCSI', '--port', 2, '--device', 0, '--type', 'hdd', '--medium', disk_path]
    end
  end
end
